#!/usr/bin/env elvish

use flag
use os
use re
use str

var zig = (which zig)
if (has-env ZIG) {
	set zig = $E:ZIG
}
var global_cache_dir = ($zig env | jq -r .global_cache_dir)
var fetched = [&]
var content = '
const std = @import("std");
pub fn main() !void {
    var arena = std.heap.ArenaAllocator.init(std.heap.page_allocator);
    defer arena.deinit();

    const gpa = arena.allocator();
    const stdout = std.io.getStdOut();
    const writer = stdout.writer();

    const zon_file = try std.fs.cwd().openFile(std.mem.span(std.os.argv[1]), .{});
    defer zon_file.close();
    const stat = try zon_file.stat();
    const zon_source = try std.zig.readSourceFileToEndAlloc(
        gpa,
        zon_file,
        std.math.cast(usize, stat.size) orelse return error.FileTooBig,
    );
    defer gpa.free(zon_source);

    var tree = try std.zig.Ast.parse(gpa, zon_source, .zon);
    defer tree.deinit(gpa);

    const zoir = try std.zig.ZonGen.generate(gpa, tree, .{});
    const root_idx: std.zig.Zoir.Node.Index = .root;
    const root_node = root_idx.get(zoir);
    const dependencies_idx: std.zig.Zoir.Node.Index = deps: {
        for (root_node.struct_literal.names, 0..) |name, i| {
            if (std.mem.eql(u8, name.get(zoir), "dependencies")) {
                break :deps root_node.struct_literal.vals.at(@intCast(i));
            }
        } else {
            try writer.writeAll("{}\n");
            return;
        }
    };
    try writer.writeAll("{\n");
    const dependencies_node = dependencies_idx.get(zoir);
    if (dependencies_node == .struct_literal) for (dependencies_node.struct_literal.names, 0..) |name, i| {
        const dep_idx = dependencies_node.struct_literal.vals.at(@intCast(i));
        const dep_node = dep_idx.get(zoir);
        try writer.print("{s}\"{s}\": {{", .{if (i != 0) "," else "", name.get(zoir)});
        for (dep_node.struct_literal.names, 0..) |field_name, fi| {
            const field_idx = dep_node.struct_literal.vals.at(@intCast(fi));
            const field_node = field_idx.get(zoir);
            const attr_name = field_name.get(zoir);

            if (std.mem.eql(u8, attr_name, "url") or std.mem.eql(u8, attr_name, "path") or std.mem.eql(u8, attr_name, "hash")) {
                try writer.print("{s}\"{s}\": \"{s}\"", .{ if (fi != 0) "," else "", attr_name, field_node.string_literal });
            }
        }
        try writer.writeAll("}");
    };
    try writer.writeAll("\n}");
}
'

var project_dir = /tmp/zig_fetch
var bin = $project_dir/main
var src = $project_dir/main.zig
fn jit {
  mkdir -p $project_dir
  tmp pwd = $project_dir
  var need_build = $true
  if (and (os:exists $src) (==s $content (cat $src | slurp))) {
    set need_build = $false
  }
  if $need_build {
    put "Building binary..."
    print $content > $src
    $zig build-exe $src
  }
}

fn do_fetch {|&zon="build.zig.zon" &f=$false|
  var m = ($bin $zon | from-json)
  for k [(keys $m)] {
    
    var expected_hash = "undefined"
    if (has-key $m[$k] hash) {
      set expected_hash = $m[$k][hash]
    } elif (has-key $m[$k] path) {
      set expected_hash = ($zig fetch --debug-hash $m[$k][path] | tail -n 1)
    } else {
      fail "Neither path nor hash has been found"
    }

    if (has-key $fetched $expected_hash) {
      continue
    } elif (and (not $f) (os:exists $global_cache_dir/p/$expected_hash)) {
      echo "Found in cache: "$expected_hash
    } else {
      echo "Fetching "$k from $m[$k][url]
      if (has-key $m[$k] url) {
	var url = $m[$k][url]
	# Convert git+https of github to commit tar.gz
	if (str:has-prefix $url 'git+https://github.com') {
	  var m = (re:find '^git\+https://(.*)#(.*)$' $url)
	  set url = 'https://'$m[groups][1][text]'/archive/'$m[groups][2][text]'.tar.gz'
	  echo "Convert to "$url
	}

        var tmpdir = (os:temp-dir 'zig_fetch-*')
        defer { os:remove-all $tmpdir }
        curl -L -O --output-dir $tmpdir $url
        var hash = ($zig fetch --debug-hash $tmpdir/* | tail -n 1)
        if (!=s $hash $expected_hash) {
          fail "Expected: "$expected_hash" but got: "$hash
        }
      } else {
        fail "Neither url nor path has been found"
      }
    }

    set fetched[$expected_hash] = ''

    var dep_zon = $global_cache_dir/p/$expected_hash/build.zig.zon
    if (os:exists $dep_zon) {
      do_fetch &zon=$dep_zon &f=$f
    }
  }
}


jit
flag:call $do_fetch~ $args
