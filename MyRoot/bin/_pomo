#!/usr/bin/env elvish

use str

var session = "pomo"

var file = /tmp/pomo

# Make sure server is created
if (not ?(tmux has -t $session 2>/dev/null)) {
  tmux new -d -s $session bash -c "
    paused=0
    function toggle_paused()
    {
      if [ $paused == 0 ]; then paused=1; else paused=0; fi
    }
    trap toggle_paused USR1

    function maybe_wait()
    {
      while [ $paused == 1 ]; do sleep 1; done
    }

    work_secs=3600
    rest_secs=300
    while true; do
      for i in `seq 1 ${work_secs}`; do
        maybe_wait
        echo working $i $work_secs  > "$file"
        sleep 1
      done
      foot --log-level=error --app-id=_float sh -c 'echo about to rest | less'
      if [ -n $WAYLAND_DISPLAY ]; then
        waylock_wrapper
      else
        xautolock -locknow
      fi
      for i in `seq 1 $rest_secs}`; do
        maybe_wait
        echo resting $i $rest_secs > "$file"
        sleep 1
      done
    done
  "
}

if (< (count $args) 1) {
  echo "_pomo [status|reset|toggle|attach]"
  exit 1
}

if (==s $args[0] status) {
  var l = (tail -1 $file)
  var @parts = (str:fields $l)
  echo $parts[0] $parts[1]/$parts[2]
} elif (==s $args[0] reset) {
  tmux respawnp -k -t $session
} elif (==s $args[0] toggle) {
  var pid = (tmux lsp -t $session -F '#{pane_pid}')
  kill -USR1 $pid
} elif (==s $args[0] attach) {
  while $true {
    try {
      var l = (tail -1 $file)
      var @parts = (str:fields $l)
      echo $parts[1] $parts[2]
    } catch { nop }
    sleep 1
  }
} else {
  echo "unknown command: "$args[0]
  exit 1
}
