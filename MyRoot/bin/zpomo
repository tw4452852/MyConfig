#!/usr/bin/env elvish

use flag
use github.com/krader1961/elvish-lib/cmd-duration

var working_time = (* 40 60)
var resting_time = (* 5 60)
var period = (+ $working_time $resting_time)
var file = /tmp/zpomo.json

fn main {|&s="" &e="" cmd|
  var cur_ts = (num (u date +%s))
  var dur = (num 0)
  var state = [
    &paused=$false
    &ts=$cur_ts
    &dur=$dur
  ]
  try {
    set state = (cat $file 2>/dev/null | from-json)
  } catch {
    nop
  }
  var elapsed = (- $cur_ts $state[ts])
  var cur_dur = (% (+ $state[dur] $elapsed) $period)

  set state[ts] = $cur_ts
  if (==s $cmd "reset") {
    set state[paused] = $false
    set state[dur] = (num 0)
  } elif (==s $cmd "toggle") {
    set state[paused] = (not $state[paused])
    set state[dur] = $cur_dur
  } elif (==s $cmd "status") {
    if (not $state[paused]) {
      if (and (>= $state[dur] $working_time) (<= $cur_dur $working_time) (!=s $s "")) {
        e:sh -c $s
      }
      if (and (<= $state[dur] $working_time) (>= $cur_dur $working_time) (!=s $e "")) {
        e:sh -c $e
      }
      set state[dur] = $cur_dur
    }

    var output = ""
    if $state[paused] {
      set output = $output"[paused] "
    }
    if (< $state[dur] $working_time) {
      set output = $output"working: "(cmd-duration:human-readable (- $working_time $state[dur]))
    } else {
      set output = $output"resting: "(cmd-duration:human-readable (- $period $state[dur]))
    }
    echo $output
  } elif (==s $cmd "numstatus") {
    if (not $state[paused]) {
      set state[dur] = $cur_dur
    }
    if (< $state[dur] $working_time) {
      echo $state[dur] $working_time
    } else {
      echo (- $state[dur] $working_time) $resting_time
    }
  } else {
    fail 'unknown command: '$cmd
  }

  put $state | to-json > $file
}

flag:call $main~ $args
