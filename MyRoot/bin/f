#!/usr/bin/env bash

set -e
#set -x

dir=$1
[ -z $dir ] && dir=.

function normalize() {
	IFS=':'; a=($1); unset IFS;
	parent_dir=`dirname ${a[0]}`
	[ ! -d "$parent_dir" ] && mkdir -p $parent_dir
	real_path="$dir/${a[0]}"
	[[ "${a[0]}" == "/"* ]] && real_path="${a[0]}" # already absolute path

	case ${a[1]} in
  	  ''|*[!0-9]*) echo "$real_path" ;;
 	   *) echo "$real_path:${a[1]}" ;;
	esac
}

export usage="<a-r>:run query|<a-c>:complete query|<a-enter>:print query|<enter>:print selected|<c-r>:reload"
output=`cd $dir && SHELL="bash" fzf -m --no-unicode --no-separator --no-scrollbar --no-color \
	--bind 'alt-r:reload(sh -c {q}||true)+transform-header(printf "%s %s\n%s" {q} $PWD "$usage")' \
	--bind 'ctrl-r:reload(fd --no-ignore)+transform-header(printf "%s\n%s" $PWD "$usage")' \
	--bind alt-r:+clear-query \
	--bind alt-c:replace-query \
	--bind 'alt-enter:print-query' \
	--bind 'enter:accept-non-empty' \
	--header "$(realpath $dir)
$usage"`
normalized_paths=()
while IFS= read -r line; do
	normalized_paths+=($(normalize $line))
done <<< "$output"

if [ -t 1 ]; then
  B `printf '%s\n' ${normalized_paths[@]}`
else
  printf '%s\n' "${normalized_paths[@]}"
fi


