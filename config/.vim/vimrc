" Basic settings"{{{
filetype off
execute pathogen#infect()
filetype plugin on
filetype indent on
set t_Co=256
"set background=dark
colorscheme nofrils-sepia
if !has('win32') && !has('win64')
  set guifont=Source\ Code\ Pro\ 10
else
  set guifont=Source_Code_Pro:h10
endif
syntax off
set nocompatible
set linebreak
set textwidth=80
set tabstop=4
set shiftwidth=4
set softtabstop=4
set scrolloff=9999
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=longest,list,full
set visualbell
"set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set number
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
set mouse=a
set relativenumber
set tags+=tags
set noautochdir
" On Windows it use gb* encoding,
" it doesn't recognize these chars
if !has('win32') && !has('win64')
  " Neovim disallow changing 'enconding' option after initialization
  " see https://github.com/neovim/neovim/pull/2929 for more details
  if !has('nvim')
    set encoding=utf-8  " Set default encoding to UTF-8
  endif
  set fileencodings=utf8,gbk
  set list
  set listchars=tab:»\ ,eol:¬,trail:▲,nbsp:▲
endif
if exists('+inccommand')
  set inccommand=split
endif
"}}}
" vimrc"{{{
augroup vimgroup
  autocmd!
  autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END
"}}}
" Status Line setting"{{{
set statusline=%F\ -\ %m%r%h[%Y-%{&fileformat}]%=[0x%B,%c][%l/%L]
"}}}
" abbreviation"{{{
iabbrev ； ;
iabbrev 。 .
iabbrev ， ,
iabbrev ： :
iabbrev （ (
iabbrev ） )
iabbrev “ "
iabbrev ” "
iabbrev ？ ?
iabbrev ！ !
" }}}
" Global keymaps"{{{
" General"{{{
let mapleader = ","
noremap \ ,
nnoremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
nnoremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')
nnoremap L $
nnoremap <silent> H :call FirstCharOrFirstCol()<cr>
function! FirstCharOrFirstCol()
  let current_col = virtcol('.')
  normal ^
  let first_char = virtcol('.')
  if current_col == first_char
    normal 0
  endif
endfunction
nnoremap / /\v
vnoremap / /\v
inoremap <f1> <esc>
nnoremap <f1> <esc>
vnoremap <f1> <esc>
nnoremap ; :
nnoremap : ;
inoremap jj <esc>
nnoremap <A-j> <c-w>j
nnoremap <A-k> <c-w>k
nnoremap <A-l> <c-w>l
nnoremap <A-h> <c-w>h
if has('nvim')
    tnoremap <Esc> <C-\><C-n>
    tnoremap <A-h> <C-\><C-n><C-w>h
    tnoremap <A-j> <C-\><C-n><C-w>j
    tnoremap <A-k> <C-\><C-n><C-w>k
    tnoremap <A-l> <C-\><C-n><C-w>l
endif
cnoremap <c-p> <up>
cnoremap <c-n> <down>
cnoremap <A-b> <C-Left>
cnoremap <A-f> <C-Right>
nnoremap <leader>mk :w<cr>:make<cr>
inoremap <leader>mk <esc>:w<cr>:make<cr>
nnoremap <leader>w :update<cr>
inoremap <leader>w <esc>:update<cr>
nnoremap <leader><space> :noh<cr>:call TwMatchClearall()<cr>
nnoremap <leader>ev <c-w><c-v><c-l>:e $MYVIMRC<cr>
nnoremap <leader>; mqA;<esc>`q
nnoremap <c-w>m <c-w>_<c-w>\|
" Quickly select the text that was just pasted. This allows you to, e.g.,
" indent it after pasting.
nnoremap gV `[v`]
"Quickfix
nnoremap <leader>qf :call QickfixToggle()<cr>
let g:quickfix_is_open = 0
function! QickfixToggle()
  if g:quickfix_is_open
    cclose
    let g:quickfix_is_open = 0
  else
    copen
    let g:quickfix_is_open = 1
  endif
endfunction
"}}}
"tw's self cmd"{{{
nnoremap <leader>gb :execute "!tw_blame -l " . line(".") . " -p " . expand("%:p")<cr>
cnoremap w!! w !sudo tee % >/dev/null
"}}}
"}}}
" Plugin-specific settings
" FZF"{{{
nnoremap <leader>zf :FZF<cr>
" List of buffers
function! BufList()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction

function! BufOpen(e)
  execute 'buffer '. matchstr(a:e, '^[ 0-9]*')
endfunction

nnoremap <silent> <Leader>zb :call fzf#run({
      \   'source':      reverse(BufList()),
      \   'sink':        function('BufOpen'),
      \   'options':     '+m',
      \   'tmux_height': '40%'
      \ })<CR>
"}}}
" tagbar"{{{
nnoremap <leader>t :TagbarToggle<CR>
"}}}
" Cscope"{{{
if has("cscope")
    set nocsverb
  set cst
    set csto=1
    if filereadable("cscope.out")
        cs add cscope.out
    endif
    set csverb
  nnoremap <leader>ss :cs find s <c-r>=expand("<cword>")<cr><cr>
  nnoremap <leader>sg :cs find g <c-r>=expand("<cword>")<cr><cr>
  nnoremap <leader>sc :cs find c <c-r>=expand("<cword>")<cr><cr>
  nnoremap <leader>st :cs find t <c-r>=expand("<cword>")<cr><cr>
  nnoremap <leader>se :cs find e <c-r>=expand("<cword>")<cr><cr>
  nnoremap <leader>sf :cs find f <c-r>=expand("<cfile>")<cr><cr>
  nnoremap <leader>si :cs find i ^<c-r>=expand("<cfile>")<cr><cr>
  nnoremap <leader>sd :cs find d <c-r>=expand("<cword>")<cr><cr>
  nnoremap <c-w><c-]> :silent vsplit<cr><c-]>
endif
"}}}
" Go"{{{
augroup gogroup
  autocmd!
  autocmd BufWritePre *.go :silent Fmt "gofmt
  autocmd FileType go compiler go
  autocmd FileType go nnoremap <buffer> <c-]> :silent call GodefUnderCursor(0)<cr>
  autocmd FileType go nnoremap <buffer> <c-w><c-]> :silent call GodefUnderCursor(1)<cr>
  autocmd FileType go nnoremap <buffer> <c-t> :silent call GodefBack()<cr>
  autocmd FileType go nnoremap <buffer> K :Godoc<cr>
augroup END
"}}}
" Markdown"{{{
augroup mdgroup
  autocmd!
  autocmd FileType mkd setlocal spell
augroup END
"}}}
" Youdao-traslation"{{{
nnoremap <leader>tr :YoudaoTranslate <c-r>=expand("<cword>")<cr><cr>
"}}}
" Wmgraphviz"{{{
augroup dotgroup
  autocmd!
  autocmd FileType dot nnoremap <buffer> <leader>ll :GraphvizCompile<cr>
  autocmd FileType dot nnoremap <buffer> <leader>lt :GraphvizCompileToLaTeX<cr>
  autocmd FileType dot nnoremap <buffer> <leader>lv :GraphvizShow<cr>
  autocmd FileType dot nnoremap <buffer> <leader>li :GraphvizInteractive<cr>
augroup END
"}}}
" Snipmate"{{{
" fix snippet_dir bug in windows
if has('win32') || has('win64')
  let g:snippets_dir='$HOME/vimfiles/bundle/snipmate/snippets'
endif
"}}}
" Help"{{{
augroup helpgroup
  autocmd!
  autocmd FileType help wincmd L
augroup END
"}}}
" gtags"{{{
if executable('gtags-cscope')
  set cscopeprg=gtags-cscope\ -aC
  if filereadable("GTAGS")
    cs add GTAGS
  endif
endif
"}}}
" match"{{{
nnoremap ? :call TwMatchToggle(expand("<cword>"))<cr>
"}}}
"terminal"{{{
if exists(':terminal')
  let g:terminal_scrollback_buffer_size = 100000
  augroup terminalgroup
    autocmd!
    autocmd BufWinEnter,WinEnter term://* startinsert
    autocmd BufLeave term://* stopinsert
  augroup END
endif
"}}}
"grep"{{{
if executable('pt')
  set grepprg=pt
endif
augroup grepgroup
  autocmd!
  autocmd QuickFixCmdPost [^l]* cw | let g:quickfix_is_open=1
augroup END
"}}}
"netrw"{{{
let g:netrw_http_xcmd= "-dump >"
"}}}
"vim-sneak"{{{
"enable "clever s"
let g:sneak#s_next = 1
"enable label-mode
let g:sneak#label = 1
"replace 'f' with 1-char Sneak
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F
omap f <Plug>Sneak_f
omap F <Plug>Sneak_F
"replace 't' with 1-char Sneak
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
omap t <Plug>Sneak_t
omap T <Plug>Sneak_T
hi link Sneak SpellBad
hi link SneakLabel SpellBad
"}}}

" vim: set foldmethod=marker et ts=2 sw=2:
