#!/bin/sh

#set -x

getWin() {
	9p read acme/index | while read -r line; do
		id=`echo $line | cut -d' ' -f1`
		name=`echo $line | cut -d' ' -f6`
		if [ "/LSP/DefRef" = $name ]; then
			echo $id
		fi
	done
}

createWin() {
	echo 'name /LSP/DefRef' | 9p write acme/new/ctl
}

wid=`getWin`
[ -z "$wid" ] && createWin && wid=`getWin`
[ -z "$wid" ] && { echo "failed to create /LSP/DefRef window"; exit 1; }

dir=$HOME/.config/acme-lsp

[ ! -d "$dir" ] && mkdir -p "$dir"

if [ $# -lt 1 ]; then
	echo "$0 [command]"
	exit 2
fi
cmd=$1
shift 1

[ -z "$(pgrep acmefocused)" ] && { echo "acmefocused not started"; exit 1; }

[ -z "$winid" ] && winid=`dial unix!$(namespace)/acmefocused`

path=`9p read acme/$winid/tag | cut -d' ' -f1`
name=
if [ "$cmd" = "start" ]; then
	[ ! -z "$1" ] && name="$1" && shift 1
fi

if [ -z "$name" ]; then
	if [ -d $path ]; then
		[ -f $path/Cargo.toml ] && name=r
		[ -f $path/go.mod ] && name=g
		[ -f $path/pubspec.yaml ] && name=d
		[ -f $path/build.zig ] && name=z
	elif [ -f $path ]; then
		ext=${path##*\.}
		[ $ext = "go" ] && name=g
		[ $ext = "rs" ] && name=r
		[ $ext = "dart" ] && name=d
		[ $ext = "zig" ] && name=z
		[ $ext = "c" ] && name=c
		[ $ext = "h" ] && name=c
	fi
fi
proxy_addr="`namespace`/acme-lsp-$name.rpc"

case $cmd in
	start)
		root=`pwd`
		[ ! -z $1 ] && root=`realpath $1`
		case $name in
			c)
				cfg="$dir/c_config.toml"
				cat <<-EOF > "$cfg"
					[Servers]
					[Servers.clangd]
					Command = ["clangd", "--log=error"]
					[[FilenameHandlers]]
					Pattern = '\.(c|cpp|cc|h)$'
					ServerKey = "clangd"
				EOF
				ACME_LSP_CONFIG="$cfg" acme-lsp -proxy.addr $proxy_addr -rootdir $root -workspaces $root
				;;
			r)
				cfg="$dir/rust_config.toml"
				cat <<-EOF > "$cfg"
					FormatOnPut = true
					[Servers]
					[Servers.ra]
					Command = ["rust-analyzer"]
					[Servers.ra.Options]
					[Servers.ra.Options.diagnostics]
					disabled = ["inactive-code"]
					[[FilenameHandlers]]
					Pattern = '\.rs$'
					ServerKey = "ra"
				EOF
				ACME_LSP_CONFIG="$cfg" acme-lsp -proxy.addr $proxy_addr -rootdir $root -workspaces $root
				;;
			g)
				cfg="$dir/go_config.toml"
				cat <<-EOF > "$cfg"
					FormatOnPut = true
					CodeActionsOnPut = ["source.organizeImports"]
					[Servers]
					[Servers.gopls]
					Command = ["gopls", "serve"]
					[[FilenameHandlers]]
					Pattern = '\.go$'
					ServerKey = "gopls"
				EOF
				ACME_LSP_CONFIG="$cfg" acme-lsp -proxy.addr $proxy_addr -rootdir $root -workspaces $root
				;;
			d)
				cfg="$dir/dart_config.toml"
				cat <<-EOF > "$cfg"
					FormatOnPut = true
					[Servers]
					[Servers.dart]
					Command = ["sh", "-c", "dart $(dirname $(which dart))/snapshots/analysis_server.dart.snapshot --lsp"]
					[[FilenameHandlers]]
					Pattern = '\.dart$'
					ServerKey = "dart"
				EOF
				ACME_LSP_CONFIG="$cfg" acme-lsp -proxy.addr $proxy_addr -rootdir $root -workspaces $root
				;;
			z)
				cfg="$dir/zig_config.toml"
				cat <<-EOF > "$cfg"
					FormatOnPut = true
					[Servers]
					[Servers.zls]
					Command = ["zls"]
					[[FilenameHandlers]]
					Pattern = '\.zig$'
					ServerKey = "zls"
				EOF
				ACME_LSP_CONFIG="$cfg" acme-lsp -proxy.addr $proxy_addr -rootdir $root -workspaces $root
				;;
			*)
				echo "Not supported: $name"
				;;
		 esac
		;;
	*)
		position=`acme-dot $winid`
		offset=`9p read acme/$wid/ctl | tr -s ' ' | cut -d' ' -f4`
		printf "#$offset" | 9p write acme/$wid/addr
		curOff=`echo $position | cut -d'#' -f3`
		curLineNum=`head -c+$curOff $path | wc -l`
		curLineNum=$((curLineNum+1))
		curLine=`sed -n ${curLineNum}p $path`
		echo "\n$position $cmd $*:$curLine" | 9p write acme/$wid/body
		L -proxy.addr $proxy_addr $cmd $* | 9p write acme/$wid/body
		echo "clean" | 9p write acme/$wid/ctl
		echo "dot=addr" | 9p write acme/$wid/ctl
		echo "show" | 9p write acme/$wid/ctl
		;;
esac
